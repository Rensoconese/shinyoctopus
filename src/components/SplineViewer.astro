---
export interface Props {
  sceneUrl: string;
  width?: string;
  height?: string;
  loadDelay?: number;
}

const { 
  sceneUrl, 
  width = "100%", 
  height = "100%",
  loadDelay = 1000
} = Astro.props;
---

<div 
  class="spline-container" 
  data-scene-url={sceneUrl}
  data-load-delay={loadDelay}
  style={`width: ${width}; height: ${height};`}
>
  <!-- El contenedor para Spline -->
</div>

<style>
  .spline-container {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 100%;
  }

  .spline-canvas {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Obtener todos los contenedores de Spline
    const containers = document.querySelectorAll('.spline-container');
    
    containers.forEach(function(container) {
      const sceneUrl = container.getAttribute('data-scene-url') || '';
      const loadDelay = parseInt(container.getAttribute('data-load-delay') || '1000');
      
      // Función para cargar Spline
      function loadSpline() {
        // Verificar si estamos en un dispositivo que debería mostrar el modelo
        if (window.innerWidth < 1200) {
          return; // No cargar en dispositivos pequeños
        }
        
        // Crear el elemento spline-viewer
        const splineViewer = document.createElement('spline-viewer');
        splineViewer.setAttribute('url', sceneUrl);
        splineViewer.setAttribute('loading', 'lazy');
        
        // Limpiar el contenedor y añadir el visor
        container.innerHTML = '';
        container.appendChild(splineViewer);
        
        console.log('⚡ Spline cargado después de:', performance.now(), 'ms');
      }
      
      // Función para cargar el script de Spline si no está cargado
      function loadSplineScript(callback: () => void) {
        if (document.querySelector('script[src*="spline-viewer.js"]')) {
          callback();
          return;
        }
        
        const script = document.createElement('script');
        script.type = 'module';
        script.src = 'https://unpkg.com/@splinetool/viewer/build/spline-viewer.js';
        script.onload = callback;
        document.head.appendChild(script);
      }
      
      // Configurar el observador de intersección para cargar cuando sea visible
      function setupIntersectionObserver() {
        const observer = new IntersectionObserver((entries) => {
          const [entry] = entries;
          if (entry.isIntersecting) {
            // Cuando el elemento es visible, cargar el script y luego el modelo
            loadSplineScript(() => {
              // Esperar un momento para que el script se inicialice completamente
              setTimeout(loadSpline, 100);
            });
            observer.disconnect();
          }
        }, {
          threshold: 0.1,
          rootMargin: '100px'
        });
        
        observer.observe(container);
      }
      
      // Esperar a que la página esté cargada y luego esperar el tiempo de delay
      if (document.readyState === 'complete') {
        setTimeout(setupIntersectionObserver, loadDelay);
      } else {
        window.addEventListener('load', () => {
          setTimeout(setupIntersectionObserver, loadDelay);
        });
      }
    });
  });
</script>
